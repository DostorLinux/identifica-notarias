import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  TextInput,
  Alert,
  Modal,
  SafeAreaView,
  ActivityIndicator,
} from 'react-native';
import { colors } from '../styles/theme';
import { apiCall } from '../utils/api';

interface Company {
  id: number;
  rut: string;
  name: string;
  address: string;
  created: string;
  isDenied: number;
  deniedNote: string;
}

interface CompanyFormData {
  id?: number;
  name: string;
  rut: string;
  address: string;
  notes: string;
}

export default function CompaniesScreen() {
  const [companies, setCompanies] = useState<Company[]>([]);
  const [loading, setLoading] = useState(true);
  const [modalVisible, setModalVisible] = useState(false);
  const [formData, setFormData] = useState<CompanyFormData>({
    name: '',
    rut: '',
    address: '',
    notes: '',
  });
  const [searchQuery, setSearchQuery] = useState('');
  const [isEditing, setIsEditing] = useState(false);

  useEffect(() => {
    loadCompanies();
  }, []);

  const loadCompanies = async () => {
    try {
      setLoading(true);
      const response = await apiCall('/company/list', 'POST', {
        page: 1,
        size: 100,
        filter: searchQuery,
      });
      
      if (response.data) {
        // Transform the array response to objects
        const transformedCompanies = response.data.map((row: any[]) => ({
          id: row[0],
          rut: row[1],
          name: row[2],
          address: row[3],
          created: row[4],
          isDenied: row[5],
          deniedNote: row[6],
        }));
        setCompanies(transformedCompanies);
      }
    } catch (error) {
      console.error('Error loading companies:', error);
      Alert.alert('Error', 'No se pudieron cargar las empresas');
    } finally {
      setLoading(false);
    }
  };

  const handleSave = async () => {
    if (!formData.name.trim() || !formData.rut.trim()) {
      Alert.alert('Error', 'Nombre y RUT son obligatorios');
      return;
    }

    try {
      const payload = { ...formData };
      if (isEditing && formData.id) {
        payload.id = formData.id;
      }

      await apiCall('/company/save', 'POST', payload);
      
      Alert.alert('Éxito', isEditing ? 'Empresa actualizada' : 'Empresa creada');
      setModalVisible(false);
      resetForm();
      loadCompanies();
    } catch (error) {
      console.error('Error saving company:', error);
      Alert.alert('Error', 'No se pudo guardar la empresa');
    }
  };

  const handleDelete = async (id: number) => {
    Alert.alert(
      'Confirmar eliminación',
      '¿Estás seguro de que quieres eliminar esta empresa?',
      [
        { text: 'Cancelar', style: 'cancel' },
        {
          text: 'Eliminar',
          style: 'destructive',
          onPress: async () => {
            try {
              await apiCall('/company/delete', 'POST', { id });
              Alert.alert('Éxito', 'Empresa eliminada');
              loadCompanies();
            } catch (error) {
              console.error('Error deleting company:', error);
              Alert.alert('Error', 'No se pudo eliminar la empresa');
            }
          },
        },
      ]
    );
  };

  const handleEdit = (company: Company) => {
    setFormData({
      id: company.id,
      name: company.name,
      rut: company.rut,
      address: company.address,
      notes: company.deniedNote || '',
    });
    setIsEditing(true);
    setModalVisible(true);
  };

  const resetForm = () => {
    setFormData({
      name: '',
      rut: '',
      address: '',
      notes: '',
    });
    setIsEditing(false);
  };

  const handleNewCompany = () => {
    resetForm();
    setModalVisible(true);
  };

  const filteredCompanies = companies.filter(company =>
    company.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    company.rut.toLowerCase().includes(searchQuery.toLowerCase())
  );

  if (loading) {
    return (
      <View style={styles.centered}>
        <ActivityIndicator size="large" color={colors.primary.purple} />
        <Text style={styles.loadingText}>Cargando empresas...</Text>
      </View>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>Gestión de Empresas</Text>
        <TouchableOpacity style={styles.addButton} onPress={handleNewCompany}>
          <Text style={styles.addButtonText}>+ Nueva Empresa</Text>
        </TouchableOpacity>
      </View>

      <View style={styles.searchContainer}>
        <TextInput
          style={styles.searchInput}
          placeholder="Buscar por nombre o RUT..."
          value={searchQuery}
          onChangeText={setSearchQuery}
          onSubmitEditing={loadCompanies}
        />
      </View>

      <ScrollView style={styles.scrollView}>
        {filteredCompanies.length === 0 ? (
          <View style={styles.emptyContainer}>
            <Text style={styles.emptyText}>No se encontraron empresas</Text>
          </View>
        ) : (
          filteredCompanies.map((company) => (
            <View key={company.id} style={styles.companyCard}>
              <View style={styles.companyInfo}>
                <Text style={styles.companyName}>{company.name}</Text>
                <Text style={styles.companyRut}>RUT: {company.rut}</Text>
                <Text style={styles.companyAddress}>{company.address}</Text>
                <Text style={styles.companyDate}>
                  Creado: {new Date(company.created).toLocaleDateString()}
                </Text>
                {company.isDenied === 1 && (
                  <View style={styles.deniedBadge}>
                    <Text style={styles.deniedText}>DENEGADA</Text>
                  </View>
                )}
              </View>
              <View style={styles.actionsContainer}>
                <TouchableOpacity
                  style={styles.editButton}
                  onPress={() => handleEdit(company)}
                >
                  <Text style={styles.editButtonText}>Editar</Text>
                </TouchableOpacity>
                <TouchableOpacity
                  style={styles.deleteButton}
                  onPress={() => handleDelete(company.id)}
                >
                  <Text style={styles.deleteButtonText}>Eliminar</Text>
                </TouchableOpacity>
              </View>
            </View>
          ))
        )}
      </ScrollView>

      <Modal
        animationType="slide"
        transparent={true}
        visible={modalVisible}
        onRequestClose={() => setModalVisible(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>
              {isEditing ? 'Editar Empresa' : 'Nueva Empresa'}
            </Text>

            <TextInput
              style={styles.input}
              placeholder="Nombre de la empresa"
              value={formData.name}
              onChangeText={(text) => setFormData({ ...formData, name: text })}
            />

            <TextInput
              style={styles.input}
              placeholder="RUT"
              value={formData.rut}
              onChangeText={(text) => setFormData({ ...formData, rut: text })}
            />

            <TextInput
              style={styles.input}
              placeholder="Dirección"
              value={formData.address}
              onChangeText={(text) => setFormData({ ...formData, address: text })}
            />

            <TextInput
              style={[styles.input, styles.textArea]}
              placeholder="Notas"
              value={formData.notes}
              onChangeText={(text) => setFormData({ ...formData, notes: text })}
              multiline
              numberOfLines={3}
            />

            <View style={styles.modalButtons}>
              <TouchableOpacity
                style={styles.cancelButton}
                onPress={() => setModalVisible(false)}
              >
                <Text style={styles.cancelButtonText}>Cancelar</Text>
              </TouchableOpacity>
              <TouchableOpacity style={styles.saveButton} onPress={handleSave}>
                <Text style={styles.saveButtonText}>
                  {isEditing ? 'Actualizar' : 'Guardar'}
                </Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: colors.background.light,
  },
  centered: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    marginTop: 10,
    color: colors.text.secondary,
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 20,
    borderBottomWidth: 1,
    borderBottomColor: '#E0E0E0',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: colors.text.primary,
  },
  addButton: {
    backgroundColor: colors.primary.purple,
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 20,
  },
  addButtonText: {
    color: 'white',
    fontWeight: '600',
  },
  searchContainer: {
    padding: 20,
  },
  searchInput: {
    backgroundColor: 'white',
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#E0E0E0',
  },
  scrollView: {
    flex: 1,
    padding: 20,
  },
  emptyContainer: {
    alignItems: 'center',
    marginTop: 50,
  },
  emptyText: {
    color: colors.text.secondary,
    fontSize: 16,
  },
  companyCard: {
    backgroundColor: 'white',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  companyInfo: {
    marginBottom: 12,
  },
  companyName: {
    fontSize: 18,
    fontWeight: 'bold',
    color: colors.text.primary,
    marginBottom: 4,
  },
  companyRut: {
    fontSize: 14,
    color: colors.text.secondary,
    marginBottom: 2,
  },
  companyAddress: {
    fontSize: 14,
    color: colors.text.secondary,
    marginBottom: 2,
  },
  companyDate: {
    fontSize: 12,
    color: colors.text.disabled,
  },
  deniedBadge: {
    backgroundColor: colors.error,
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 4,
    alignSelf: 'flex-start',
    marginTop: 8,
  },
  deniedText: {
    color: 'white',
    fontSize: 12,
    fontWeight: 'bold',
  },
  actionsContainer: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
    gap: 8,
  },
  editButton: {
    backgroundColor: colors.extended.blue,
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 6,
  },
  editButtonText: {
    color: 'white',
    fontSize: 14,
    fontWeight: '600',
  },
  deleteButton: {
    backgroundColor: colors.error,
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 6,
  },
  deleteButtonText: {
    color: 'white',
    fontSize: 14,
    fontWeight: '600',
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContent: {
    backgroundColor: 'white',
    borderRadius: 20,
    padding: 24,
    width: '90%',
    maxWidth: 400,
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: colors.text.primary,
    marginBottom: 20,
    textAlign: 'center',
  },
  input: {
    borderWidth: 1,
    borderColor: '#E0E0E0',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 12,
    marginBottom: 16,
    fontSize: 16,
  },
  textArea: {
    height: 80,
    textAlignVertical: 'top',
  },
  modalButtons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 20,
  },
  cancelButton: {
    flex: 1,
    backgroundColor: '#E0E0E0',
    paddingVertical: 12,
    borderRadius: 8,
    marginRight: 8,
  },
  cancelButtonText: {
    color: colors.text.secondary,
    textAlign: 'center',
    fontWeight: '600',
  },
  saveButton: {
    flex: 1,
    backgroundColor: colors.primary.purple,
    paddingVertical: 12,
    borderRadius: 8,
    marginLeft: 8,
  },
  saveButtonText: {
    color: 'white',
    textAlign: 'center',
    fontWeight: '600',
  },
});
